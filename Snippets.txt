                <DataGrid x:Name="dgDashBoard" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="7" Grid.RowSpan="15" 
                          Background="Aqua" 
                          ColumnWidth="*" 
                          RowHeight="49.5"
                          CanUserDeleteRows="False" 
                          RowDetailsVisibilityMode="Visible" 
                          CanUserReorderColumns="False" 
                          CanUserSortColumns="False" 
                          AutoGenerateColumns="False" 
                          FontWeight="Bold" 
                          FontSize="24"
                          HeadersVisibility="All">
                    <DataGrid.Resources>
                        <Style BasedOn="{StaticResource {x:Type DataGridColumnHeader}}" TargetType="{x:Type DataGridColumnHeader}" >
                            <Setter Property="Background" Value="DarkGray" />
                            <Setter Property="Foreground" Value="White" />
                            <Setter Property="BorderBrush" Value="White"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="Margin" Value="-1 -1 0 0"/>
                            <Setter Property="Height" Value="50" />
                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        </Style>
                    </DataGrid.Resources>

                    <DataGrid.Columns>
                        <!--<DataGridTextColumn Header="Description" Binding="{Binding Description}"/>-->
                        <DataGridTextColumn Header="Station-1" Binding="{Binding Column1}"/>
                        <DataGridTextColumn Header="Station-2" Binding="{Binding Column2}"/>
                        <DataGridTextColumn Header="Station-3" Binding="{Binding Column3}"/>
                        <DataGridTextColumn Header="Station-4" Binding="{Binding Column4}"/>
                        <DataGridTextColumn Header="Station-5" Binding="{Binding Column5}"/>
                        <DataGridTextColumn Header="Station-6" Binding="{Binding Column6}"/>
                    </DataGrid.Columns>
                </DataGrid>




using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Printing;
using System.Text;
using System.Windows;
using StorageWaterHeater;

namespace StorageWaterHeater
{
    public class ProcessData
    {
        public static List<List<double>> MasterDataView = new List<List<double>>(14);

        public static List<List<double>> LiveTableView()
        {
            List<double> ColumnOneData = new List<double>(14);
            List<double> ColumnTwoData = new List<double>(14);
            List<double> ColumnThreeData = new List<double>(14);
            List<double> ColumnFourData = new List<double>(14);
            List<double> ColumnFiveData = new List<double>(14);
            List<double> ColumnSixData = new List<double>(14);


            List<double> TemperatureArray = new List<double>(30);
            List<double> FlowSVDataArray = new List<double>(6);
            List<double> FlowDataArray = new List<double>(12);
            List<double> ElectricalDataArray = new List<double>(36);

            TemperatureArray = SimulatedData.TemperatureData(30.0, 35.0);
            FlowSVDataArray = SimulatedData.FlowSVData(2.0, 20.0);
            FlowDataArray = SimulatedData.FlowData(0.0, 16.0);
            ElectricalDataArray = SimulatedData.ElectricalData(200.0, 235.0);

            /* ColumnOneData */

            ColumnOneData.Insert(0, TemperatureArray[0]);
            ColumnOneData.Insert(1, TemperatureArray[1]);
            ColumnOneData.Insert(2, TemperatureArray[2]);
            ColumnOneData.Insert(3, TemperatureArray[3]);
            ColumnOneData.Insert(4, TemperatureArray[4]);

            ColumnOneData.Insert(5, FlowSVDataArray[0]);

            ColumnOneData.Insert(6, FlowDataArray[0]);
            ColumnOneData.Insert(7, FlowDataArray[1]);

            ColumnOneData.Insert(8,  ElectricalDataArray[0]);
            ColumnOneData.Insert(9,  ElectricalDataArray[1]);
            ColumnOneData.Insert(10, ElectricalDataArray[2]);
            ColumnOneData.Insert(11, ElectricalDataArray[3]);
            ColumnOneData.Insert(12, ElectricalDataArray[4]);
            ColumnOneData.Insert(13, ElectricalDataArray[5]);


            /* ColumnTwoData */

            ColumnTwoData.Insert(0, TemperatureArray[5]);
            ColumnTwoData.Insert(1, TemperatureArray[6]);
            ColumnTwoData.Insert(2, TemperatureArray[7]);
            ColumnTwoData.Insert(3, TemperatureArray[8]);
            ColumnTwoData.Insert(4, TemperatureArray[9]);

            ColumnTwoData.Insert(5, FlowSVDataArray[1]);

            ColumnTwoData.Insert(6, FlowDataArray[2]);
            ColumnTwoData.Insert(7, FlowDataArray[3]);

            ColumnTwoData.Insert(8,  ElectricalDataArray[6]);
            ColumnTwoData.Insert(9,  ElectricalDataArray[7]);
            ColumnTwoData.Insert(10, ElectricalDataArray[8]);
            ColumnTwoData.Insert(11, ElectricalDataArray[9]);
            ColumnTwoData.Insert(12, ElectricalDataArray[10]);
            ColumnTwoData.Insert(13, ElectricalDataArray[11]);


            /* ColumnThreeData */

            ColumnThreeData.Insert(0, TemperatureArray[10]);
            ColumnThreeData.Insert(1, TemperatureArray[11]);
            ColumnThreeData.Insert(2, TemperatureArray[12]);
            ColumnThreeData.Insert(3, TemperatureArray[13]);
            ColumnThreeData.Insert(4, TemperatureArray[14]);

            ColumnThreeData.Insert(5, FlowSVDataArray[2]);

            ColumnThreeData.Insert(6, FlowDataArray[4]);
            ColumnThreeData.Insert(7, FlowDataArray[5]);

            ColumnThreeData.Insert(8,  ElectricalDataArray[12]);
            ColumnThreeData.Insert(9,  ElectricalDataArray[13]);
            ColumnThreeData.Insert(10, ElectricalDataArray[14]);
            ColumnThreeData.Insert(11, ElectricalDataArray[15]);
            ColumnThreeData.Insert(12, ElectricalDataArray[16]);
            ColumnThreeData.Insert(13, ElectricalDataArray[17]);


            /* ColumnFourData */
            ColumnFourData.Insert(0, TemperatureArray[15]);
            ColumnFourData.Insert(1, TemperatureArray[16]);
            ColumnFourData.Insert(2, TemperatureArray[17]);
            ColumnFourData.Insert(3, TemperatureArray[18]);
            ColumnFourData.Insert(4, TemperatureArray[19]);

            ColumnFourData.Insert(5, FlowSVDataArray[3]);

            ColumnFourData.Insert(6, FlowDataArray[6]);
            ColumnFourData.Insert(7, FlowDataArray[7]);

            ColumnFourData.Insert(8,  ElectricalDataArray[18]);
            ColumnFourData.Insert(9,  ElectricalDataArray[19]);
            ColumnFourData.Insert(10, ElectricalDataArray[20]);
            ColumnFourData.Insert(11, ElectricalDataArray[21]);
            ColumnFourData.Insert(12, ElectricalDataArray[22]);
            ColumnFourData.Insert(13, ElectricalDataArray[23]);


            /* ColumnFiveData */
            ColumnFiveData.Insert(0, TemperatureArray[20]);
            ColumnFiveData.Insert(1, TemperatureArray[21]);
            ColumnFiveData.Insert(2, TemperatureArray[22]);
            ColumnFiveData.Insert(3, TemperatureArray[23]);
            ColumnFiveData.Insert(4, TemperatureArray[24]);

            ColumnFiveData.Insert(5, FlowSVDataArray[4]);

            ColumnFiveData.Insert(6, FlowDataArray[8]);
            ColumnFiveData.Insert(7, FlowDataArray[9]);

            ColumnFiveData.Insert(8,  ElectricalDataArray[24]);
            ColumnFiveData.Insert(9,  ElectricalDataArray[25]);
            ColumnFiveData.Insert(10, ElectricalDataArray[26]);
            ColumnFiveData.Insert(11, ElectricalDataArray[27]);
            ColumnFiveData.Insert(12, ElectricalDataArray[28]);
            ColumnFiveData.Insert(13, ElectricalDataArray[29]);


            /* ColumnSixData */
            ColumnSixData.Insert(0, TemperatureArray[25]);
            ColumnSixData.Insert(1, TemperatureArray[26]);
            ColumnSixData.Insert(2, TemperatureArray[27]);
            ColumnSixData.Insert(3, TemperatureArray[28]);
            ColumnSixData.Insert(4, TemperatureArray[29]);

            ColumnSixData.Insert(5, FlowSVDataArray[5]);

            ColumnSixData.Insert(6, FlowDataArray[10]);
            ColumnSixData.Insert(7, FlowDataArray[11]);

            ColumnSixData.Insert(8,  ElectricalDataArray[30]);
            ColumnSixData.Insert(9,  ElectricalDataArray[31]);
            ColumnSixData.Insert(10, ElectricalDataArray[32]);
            ColumnSixData.Insert(11, ElectricalDataArray[33]);
            ColumnSixData.Insert(12, ElectricalDataArray[34]);
            ColumnSixData.Insert(13, ElectricalDataArray[35]);

            /* MasterDataView */
            MasterDataView.Insert(0, ColumnOneData);
            MasterDataView.Insert(1, ColumnTwoData);
            MasterDataView.Insert(2, ColumnThreeData);
            MasterDataView.Insert(3, ColumnFourData);
            MasterDataView.Insert(4, ColumnFiveData);
            MasterDataView.Insert(5, ColumnSixData);

            return MasterDataView;
        }
    }
}




using System;
using System.Collections.Generic;
using System.Text;

namespace StorageWaterHeater
{
    class SimulatedData
    {
        public static List<double> TemperatureData(double min, double max)
        {
            List<double> TemperatureDataArray = new List<double>();
            Random randNum = new Random();

            for (int i = 0; i < 30; i++)
            {
                double a = randNum.NextDouble();
                double b = max - min;
                double c = a * b;
                double d = c + min;
                TemperatureDataArray.Insert(i, d);
            }
            return TemperatureDataArray;
        }

        public static List<double> ElectricalData(double min, double max)
        {
            List<double> ElectricalDataArray = new List<double>();
            Random randNum = new Random();

            for (int i = 0; i < 36; i++)
            {
                double a = randNum.NextDouble();
                double b = max - min;
                double c = a * b;
                double d = c + min;
                ElectricalDataArray.Insert(i, d);
            }
            return ElectricalDataArray;
        }

        public static List<double> FlowSVData(double min, double max)
        {
            List<double> FlowSVDataArray = new List<double>();
            Random randNum = new Random();

            for (int i = 0; i < 6; i++)
            {
                double a = randNum.NextDouble();
                double b = max - min;
                double c = a * b;
                double d = c + min;
                FlowSVDataArray.Insert(i, d);
            }
            return FlowSVDataArray;
        }

        public static List<double> FlowData(double min, double max)
        {
            List<double> FlowDataArray = new List<double>();
            Random randNum = new Random();

            for (int i = 0; i < 12; i++)
            {
                double a = randNum.NextDouble();
                double b = max - min;
                double c = a * b;
                double d = c + min;
                FlowDataArray.Insert(i, d);
            }
            return FlowDataArray;
        }
    }
}